{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport './index.css';\nimport Question from \"./Question\";\nimport QuestionList from \"./QuestionList\";\nimport NotFound from \"./NotFound\";\nimport AddQuestion from \"./AddQuestion\";\nimport AddAnswer from \"./AddAnswer\";\nimport axios from \"axios\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      questions: [] // this.handleChange = this.handleChange.bind(this);\n\n    };\n    _this.API_URL = window.location.href;\n    _this.postDataToDB = _this.postDataToDB.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.postAnswersToDB = _this.postAnswersToDB.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateRating = _this.updateRating(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // handleChange() {\n  //     console.log(\"test\");\n  // }\n\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, json;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://localhost:8080/questions2\");\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                json = _context.sent;\n                this.setState({\n                  questions: json\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"postDataToDB\",\n    value: function postDataToDB(title, description) {\n      fetch(\"http://localhost:8080/questions\", {\n        method: 'post',\n        body: JSON.stringify({\n          \"title\": title,\n          \"description\": description,\n          \"answers\": []\n        }),\n        headers: new Headers({\n          \"Content-Type\": \"application/json\"\n        }) // add headers\n\n      }); //.then(response => response.json())\n    }\n  }, {\n    key: \"postAnswersToDB\",\n    value: function postAnswersToDB(text, id) {\n      fetch(\"http://localhost:8080/questions/:id/answers\", {\n        method: 'put',\n        body: JSON.stringify({\n          \"originalPostId\": id,\n          \"answer\": text\n        }),\n        headers: new Headers({\n          \"Content-Type\": \"application/json\"\n        }) // add headers\n\n      }); // .then(response => response.json())\n    }\n  }, {\n    key: \"updateRating\",\n    value: function updateRating(rating, id) {\n      fetch('http://localhost:8080/:id/rating', {\n        method: 'put',\n        body: JSON.stringify({\n          \"originalPostId\": id,\n          \"rating\": rating++\n        }),\n        headers: new Headers({\n          \"Content-Type\": \"application/json\"\n        }) // add headers\n\n      }); // .then(response=> response.json())\n      //             // .then(response => console.log(response.json))\n    } // putDataToDB = (title,description) => {\n    //     let currentIds = this.state.questions.map(questions => questions.id);\n    //     let idToBeAdded = 0;\n    //     while (currentIds.includes(idToBeAdded)) {\n    //         ++idToBeAdded;\n    //     }\n    //\n    //     axios.post(\"http://localhost:8080/questions2\", {\n    //         id: idToBeAdded,\n    //         title: title,\n    //         description: description\n    //     });\n    // };\n\n  }, {\n    key: \"getQuestionFromId\",\n    value: function () {\n      var _getQuestionFromId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        var response, json;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(\"http://localhost:8080/questions2\");\n\n              case 2:\n                response = _context2.sent;\n                _context2.next = 5;\n                return response.json();\n\n              case 5:\n                json = _context2.sent;\n                this.setState({\n                  questions: json\n                });\n                return _context2.abrupt(\"return\", this.state.questions.find(function (elm) {\n                  return Number(elm.id) === Number(id);\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getQuestionFromId(_x) {\n        return _getQuestionFromId.apply(this, arguments);\n      }\n\n      return getQuestionFromId;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var questions = this.state.questions;\n      console.log(this.state.questions);\n      return React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"StackOverflow\"), React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: '/',\n        render: function render(props) {\n          return React.createElement(QuestionList, Object.assign({}, props, {\n            questions: questions,\n            header: 'Questions Asked',\n            postDataToDB: _this2.postDataToDB,\n            form: _this2.postDataToDB,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: '/question/:id',\n        render: function render(props) {\n          return React.createElement(Question, Object.assign({}, props, {\n            questionsID: props.match.params.id,\n            myStuff: _this2,\n            postAnswersToDB: _this2.postAnswersToDB,\n            rating: _this2.updateRating,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(Route, {\n        component: NotFound,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\mrazo\\OneDrive\\Plocha\\School\\Frameworks\\MandatoryTest\\src\\App.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","Switch","Question","QuestionList","NotFound","AddQuestion","AddAnswer","axios","App","props","state","questions","API_URL","window","location","href","postDataToDB","bind","postAnswersToDB","updateRating","fetch","response","json","setState","title","description","method","body","JSON","stringify","headers","Headers","text","id","rating","find","elm","Number","console","log","match","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {  BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport './index.css';\r\nimport Question from \"./Question\";\r\nimport QuestionList from \"./QuestionList\";\r\nimport NotFound from \"./NotFound\";\r\nimport AddQuestion from \"./AddQuestion\";\r\nimport AddAnswer from \"./AddAnswer\";\r\nimport axios from \"axios\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { questions: [] }\r\n        // this.handleChange = this.handleChange.bind(this);\r\n        this.API_URL = window.location.href;\r\n\r\n        this.postDataToDB = this.postDataToDB.bind(this);\r\n        this.postAnswersToDB = this.postAnswersToDB.bind(this);\r\n        this.updateRating = this.updateRating(this);\r\n    }\r\n    // handleChange() {\r\n    //     console.log(\"test\");\r\n    // }\r\n\r\n    async componentWillMount() {\r\n        //await data.\r\n        const response = await fetch(\r\n            `http://localhost:8080/questions2`\r\n        );\r\n\r\n        //assign to const json and set state when we receive data\r\n        const json = await response.json();\r\n        this.setState({ questions: json });\r\n    }\r\n\r\n    postDataToDB(title, description){\r\n        fetch(`http://localhost:8080/questions`, {\r\n            method:'post',\r\n              body: JSON.stringify({\r\n                    \"title\": title,\r\n                    \"description\": description,\r\n                    \"answers\": []\r\n                }),\r\n            headers: new Headers({ \"Content-Type\": \"application/json\" }) // add headers\r\n\r\n    })\r\n            //.then(response => response.json())\r\n    }\r\n    postAnswersToDB(text, id){\r\n        fetch(\"http://localhost:8080/questions/:id/answers\",{\r\n            method: 'put',\r\n            body: JSON.stringify({\r\n                \"originalPostId\": id,\r\n                \"answer\": text,\r\n            }),\r\n            headers: new Headers({ \"Content-Type\": \"application/json\" }) // add headers\r\n\r\n        })\r\n            // .then(response => response.json())\r\n    }\r\n    updateRating(rating, id){\r\n        fetch('http://localhost:8080/:id/rating', {\r\n            method:'put',\r\n            body:JSON.stringify({\r\n                \"originalPostId\": id,\r\n                \"rating\": rating++\r\n            }),\r\n            headers: new Headers({ \"Content-Type\": \"application/json\" }) // add headers\r\n        })\r\n\r\n            // .then(response=> response.json())\r\n        //             // .then(response => console.log(response.json))\r\n    }\r\n    // putDataToDB = (title,description) => {\r\n    //     let currentIds = this.state.questions.map(questions => questions.id);\r\n    //     let idToBeAdded = 0;\r\n    //     while (currentIds.includes(idToBeAdded)) {\r\n    //         ++idToBeAdded;\r\n    //     }\r\n    //\r\n    //     axios.post(\"http://localhost:8080/questions2\", {\r\n    //         id: idToBeAdded,\r\n    //         title: title,\r\n    //         description: description\r\n    //     });\r\n    // };\r\n\r\n   \r\n    async getQuestionFromId(id) {\r\n               //await data.\r\n               const response = await fetch(\r\n                `http://localhost:8080/questions2`\r\n            );\r\n    \r\n            //assign to const json and set state when we receive data\r\n            const json = await response.json();\r\n            this.setState({ questions: json });\r\n            return this.state.questions.find((elm) => Number(elm.id) === Number(id));\r\n    }\r\n    render() {\r\n        var questions = this.state.questions;\r\n        console.log(this.state.questions);\r\n        return (\r\n            <Router>\r\n                <div className=\"container\">\r\n                    <h1>StackOverflow</h1>\r\n                    <Switch>\r\n                    <Route exact path={'/'}\r\n                            render={(props) =>\r\n                                <QuestionList {...props}\r\n                                    questions={questions}\r\n                                    header={'Questions Asked'} postDataToDB={this.postDataToDB} form={this.postDataToDB}/>\r\n\r\n\r\n\r\n                            }\r\n                        />\r\n\r\n                        <Route exact path={'/question/:id'}\r\n                            render={(props) => <Question {...props}\r\n                                questionsID={props.match.params.id} myStuff={this} postAnswersToDB={this.postAnswersToDB}\r\n                            rating={this.updateRating}/>\r\n\r\n                            }\r\n                        />\r\n\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}