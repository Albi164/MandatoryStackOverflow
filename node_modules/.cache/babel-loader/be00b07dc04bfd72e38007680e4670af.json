{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport Switch from \"react-switch\";\nimport './index.css';\nimport Question from \"./Question\";\nimport QuestionList from \"./QuestionList\";\nimport AddQuestion from \"./AddQuestion\";\nimport NotFound from \"./NotFound\";\nimport axios from 'axios';\n\nfunction axiosTest() {\n  return axios.get('http://localhost:8080/questions2').then(function (response) {\n    // returning the data here allows the caller to get it through another .then(...)\n    return response.data;\n  });\n}\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.getDataFromDb = function () {\n      fetch(\"http://localhost:5000/api/questions\").then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this.setState({\n          data: res.data\n        });\n      });\n\n      _this.storage();\n    };\n\n    _this.putDataToDB = function (title, description) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:5000/api/questions\", {\n        id: idToBeAdded,\n        title: title,\n        description: description\n      });\n    };\n\n    _this.gotData = false;\n    _this.state = {\n      checked: false,\n      questions: _this.getData()\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.API_URL = window.location.href;\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleChange\",\n    value: function handleChange() {\n      console.log(\"test\");\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 1000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    } // never let a process live forever\n    // always kill a process everytime we are done using it\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    }\n  }, {\n    key: \"storage\",\n    value: function storage() {\n      var data = this.state.data;\n      localStorage.setItem(\"data\", JSON.stringify(data));\n    }\n  }, {\n    key: \"getDataFromDbWithId\",\n    value: function getDataFromDbWithId(id) {\n      console.log(this.state.data);\n      console.log(id);\n      return this.state.data.find(function (dat) {\n        return dat._id === id;\n      });\n    }\n  }, {\n    key: \"addQuestion\",\n    // componentDidMount() {\n    //     axiosTest().then(data => {\n    //         this.setState({\n    //             questions: data\n    //         });\n    //         this.gotData = true;\n    //     });\n    // }\n    // componentWillMount() {\n    //     axiosTest().then(data => {\n    //         this.setState({\n    //             questions: data\n    //         });\n    //         this.gotData = true;\n    //     });\n    // }\n    //     getData(){\n    //     console.log(this);\n    //     // fetch(`http://localhost:8080/questions2`)\n    //     //     .then(response =>{\n    //     //         console.log(response);\n    //     //\n    //     //     })\n    //     //     .then(json =>{\n    //     //         this.setState({questions: json});\n    //     //     });\n    //         axiosTest().then(data => {\n    //             this.setState({\n    //                 questions: data\n    //             });\n    //             this.gotData = true;\n    //         });\n    // }\n    value: function addQuestion(text) {\n      var newQuestion = {\n        id: Math.floor(Math.random() * Math.floor(1000000)),\n        task: text,\n        done: false\n      };\n      this.setState({\n        questions: [].concat(_toConsumableArray(this.state.questions), [newQuestion])\n      });\n    }\n  }, {\n    key: \"getQuestionFromId\",\n    value: function getQuestionFromId(id) {\n      return this.state.questions.find(function (elm) {\n        return elm.id === Number(id);\n      });\n    }\n  }, {\n    key: \"filterByTopic\",\n    value: function filterByTopic(topic) {\n      return this.state.questions.filter(function (elm) {\n        return elm.topic.includes(topic);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var questions = this.state.questions;\n      return React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"StackOverflow\"), React.createElement(Switch, {\n        onChange: this.handleChange,\n        checked: this.state.checked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: '/',\n        render: function render(props) {\n          return React.createElement(QuestionList, Object.assign({\n            gotData: true\n          }, props, {\n            questions: questions,\n            header: 'Questions Asked',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: '/questions/:id',\n        render: function render(props) {\n          return React.createElement(Question, Object.assign({}, props, {\n            question: _this2.getDataFromDbWithId(props.match.params.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), \"} />\", React.createElement(Route, {\n        exact: true,\n        path: '/questions/with/:topic',\n        render: function render(props) {\n          return React.createElement(QuestionList, Object.assign({}, props, {\n            questions: _this2.filterByTopic(props.match.params.topic),\n            header: \"Questions that consist \".concat(props.match.params.topic),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(Route, {\n        component: NotFound,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\mrazo\\OneDrive\\Plocha\\School\\Frameworks\\MandatoryTest\\src\\App.js"],"names":["React","Component","Route","Link","BrowserRouter","Router","Switch","Question","QuestionList","AddQuestion","NotFound","axios","axiosTest","get","then","response","data","App","props","getDataFromDb","fetch","json","res","setState","storage","putDataToDB","title","description","currentIds","state","map","id","idToBeAdded","includes","post","gotData","checked","questions","getData","handleChange","bind","API_URL","window","location","href","console","log","intervalIsSet","interval","setInterval","clearInterval","localStorage","setItem","JSON","stringify","find","dat","_id","text","newQuestion","Math","floor","random","task","done","elm","Number","topic","filter","getDataFromDbWithId","match","params","filterByTopic"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport Switch from \"react-switch\";\nimport './index.css';\nimport Question from \"./Question\";\nimport QuestionList from \"./QuestionList\";\nimport AddQuestion from \"./AddQuestion\";\nimport NotFound from \"./NotFound\";\nimport axios from 'axios';\nfunction axiosTest() {\n    return axios.get('http://localhost:8080/questions2').then(response => {\n        // returning the data here allows the caller to get it through another .then(...)\n        return response.data\n    })\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.gotData = false;\n        this.state = { checked: false, questions: this.getData()}\n        this.handleChange = this.handleChange.bind(this);\n        this.API_URL=window.location.href;\n    }\n    handleChange() {\n        console.log(\"test\");\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    storage(){\n        let data = this.state.data;\n        localStorage.setItem(\"data\", JSON.stringify(data))\n    };\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    getDataFromDb = () => {\n        fetch(\"http://localhost:5000/api/questions\")\n            .then(data => data.json())\n            .then(res => this.setState({ data: res.data }));\n        this.storage()\n    };\n\n    getDataFromDbWithId (id) {\n        console.log(this.state.data) ;\n        console.log(id);\n        return this.state.data.find((dat =>dat._id === id))\n    };\n\n    // our put method that uses our backend api\n    // to create new query into our data base\n    putDataToDB = (title,description) => {\n        let currentIds = this.state.data.map(data => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post(\"http://localhost:5000/api/questions\", {\n            id: idToBeAdded,\n            title: title,\n            description: description\n        });\n    };\n    // componentDidMount() {\n    //     axiosTest().then(data => {\n    //         this.setState({\n    //             questions: data\n    //         });\n    //         this.gotData = true;\n    //     });\n    // }\n    // componentWillMount() {\n    //     axiosTest().then(data => {\n    //         this.setState({\n    //             questions: data\n    //         });\n    //         this.gotData = true;\n    //     });\n    // }\n    //     getData(){\n    //     console.log(this);\n    //     // fetch(`http://localhost:8080/questions2`)\n    //     //     .then(response =>{\n    //     //         console.log(response);\n    //     //\n    //     //     })\n    //     //     .then(json =>{\n    //     //         this.setState({questions: json});\n    //     //     });\n    //         axiosTest().then(data => {\n    //             this.setState({\n    //                 questions: data\n    //             });\n    //             this.gotData = true;\n    //         });\n    // }\n\n\n\n\n    addQuestion(text) {\n        let newQuestion = {\n            id: Math.floor(Math.random() * Math.floor(1000000)),\n            task: text,\n            done: false\n        };\n        this.setState({\n            questions: [...this.state.questions, newQuestion]\n        });\n    }\n    getQuestionFromId(id) {\n        return this.state.questions.find((elm) => elm.id === Number(id));\n    }\n\n    filterByTopic(topic) {\n        return this.state.questions.filter((elm) => elm.topic.includes(topic))\n    }\n\n    render() {\n        var questions = this.state.questions;\n        return (\n            <Router>\n                <div className=\"container\">\n                    <h1>StackOverflow</h1>\n\n                    <Switch onChange={this.handleChange} checked={this.state.checked} >\n                        <Route exact path={'/'}\n                               render={(props) =>\n                                   <QuestionList gotData={true} {...props}\n                                                 questions={questions}\n                                                 header={'Questions Asked'}/>\n                               }\n                        />\n\n                        <Route exact path={'/questions/:id'}\n                               render={(props) => <Question {...props}\n                                                            question={this.getDataFromDbWithId(props.match.params.id)}/>}/>}\n                        />\n\n                        <Route exact path={'/questions/with/:topic'}\n                               render={(props) =>\n                                   <QuestionList {...props}\n                                                 questions={this.filterByTopic(props.match.params.topic)}\n                                                 header={`Questions that consist ${props.match.params.topic}`}/>}\n                        />\n\n                        <Route component={NotFound} />\n                    </Switch>\n\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}