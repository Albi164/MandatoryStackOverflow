{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\src\\\\Question.js\";\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport AddAnswer from \"./AddAnswer\";\nimport props from \"./App\";\n\nvar Question =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Question, _Component);\n\n  function Question(props) {\n    var _this;\n\n    _classCallCheck(this, Question);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Question).call(this, props));\n    _this.state = {\n      questions: []\n    };\n    return _this;\n  }\n\n  _createClass(Question, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var response, questionsArray;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://localhost:8080/questions2\");\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                questionsArray = _context.sent;\n                this.setState({\n                  currentQuestion: questionsArray.find(function (question) {\n                    return question._id === _this2.props.match.params.id;\n                  })\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // const {title, description} = this.state.currentQuestion\n      //  this.state.questions.forEach((elm) => {\n      //     list.push(<li key={elm.id}>\n      //         <Link key={elm.id} to={`/questions/with/${elm.topic}`}>{elm.topic}</Link>\n      //     </li>)\n      // });\n      return this.state.currentQuestion ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, this.state.currentQuestion.title), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, this.state.currentQuestion.description), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, this.state.currentQuestion.answers.length <= 0 ? \"NO Answers yet\" : this.state.currentQuestion.answers.map(function (dat) {\n        return React.createElement(\"li\", {\n          style: {\n            padding: \"10px\"\n          },\n          key: _this3.state.currentQuestion.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            color: \"gray\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, \" \"), \" \", dat.text, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }), dat.message, React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this3.props.state.updateRating(_this3.state.answers.rating);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"Increase rating\"));\n      })), React.createElement(AddAnswer, {\n        postAnswersToDB: this.props.postAnswersToDB,\n        rating: this.props.rating,\n        originalQuestionID: this.props.questionsID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      })) : null;\n    }\n  }]);\n\n  return Question;\n}(Component);\n\nexport default Question;","map":{"version":3,"sources":["C:\\Users\\mrazo\\OneDrive\\Plocha\\School\\Frameworks\\MandatoryTest\\src\\Question.js"],"names":["React","Component","Link","AddAnswer","props","Question","state","questions","fetch","response","json","questionsArray","setState","currentQuestion","find","question","_id","match","params","id","title","description","answers","length","map","dat","padding","message","color","text","updateRating","rating","postAnswersToDB","questionsID"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,Q;;;;;AACF,oBAAYD,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;AACA,UAAKE,KAAL,GAAa;AAACC,MAAAA,SAAS,EAAC;AAAX,KAAb;AAFe;AAGlB;;;;;;;;;;;;;;;;uBAG0BC,KAAK,oC;;;AAAtBC,gBAAAA,Q;;uBAKuBA,QAAQ,CAACC,IAAT,E;;;AAAvBC,gBAAAA,c;AACN,qBAAKC,QAAL,CAAc;AAAEC,kBAAAA,eAAe,EAAEF,cAAc,CAACG,IAAf,CAAoB,UAAAC,QAAQ;AAAA,2BAAIA,QAAQ,CAACC,GAAT,KAAiB,MAAI,CAACZ,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAAwBC,EAA7C;AAAA,mBAA5B;AAAnB,iBAAd;;;;;;;;;;;;;;;;;;6BAEK;AAAA;;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aACI,KAAKb,KAAL,CAAWO,eAAX,GAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKP,KAAL,CAAWO,eAAX,CAA2BO,KAAhC,CADqB,EAErB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKd,KAAL,CAAWO,eAAX,CAA2BQ,WAA/B,CAFqB,EAGrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKf,KAAL,CAAWO,eAAX,CAA2BS,OAA3B,CAAmCC,MAAnC,IAA6C,CAA7C,GACK,gBADL,GAEK,KAAKjB,KAAL,CAAWO,eAAX,CAA2BS,OAA3B,CAAmCE,GAAnC,CAAuC,UAAAC,GAAG;AAAA,eACxC;AAAI,UAAA,KAAK,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAX;AAAgC,UAAA,GAAG,EAAE,MAAI,CAACpB,KAAL,CAAWO,eAAX,CAA2Bc,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,OAC8CH,GAAG,CAACI,IADlD,OACwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADxD,EAGKJ,GAAG,CAACE,OAHT,EAII;AAAQ,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACvB,KAAL,CAAWE,KAAX,CAAiBwB,YAAjB,CAA8B,MAAI,CAACxB,KAAL,CAAWgB,OAAX,CAAmBS,MAAjD,CAAN;AAAA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAJJ,CADwC;AAAA,OAA1C,CAHV,CAHqB,EAiBzB,oBAAC,SAAD;AACI,QAAA,eAAe,EAAE,KAAK3B,KAAL,CAAW4B,eADhC;AACiD,QAAA,MAAM,EAAE,KAAK5B,KAAL,CAAW2B,MADpE;AAC4E,QAAA,kBAAkB,EAAE,KAAK3B,KAAL,CAAW6B,WAD3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjByB,CAA7B,GAqBU,IAtBd;AAwBH;;;;EA9CkBhC,S;;AAiDvB,eAAeI,QAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport AddAnswer from \"./AddAnswer\";\r\nimport props from \"./App\";\r\n\r\nclass Question extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {questions:[]}\r\n    }\r\n    async componentWillMount() {\r\n        //await data.\r\n        const response = await fetch(\r\n            `http://localhost:8080/questions2`\r\n        );\r\n\r\n        //assign to const json and set state when we receive data\r\n        const questionsArray = await response.json();\r\n        this.setState({ currentQuestion: questionsArray.find(question => question._id === this.props.match.params.id) });\r\n    }\r\n    render() {\r\n        // const {title, description} = this.state.currentQuestion\r\n        //  this.state.questions.forEach((elm) => {\r\n        //     list.push(<li key={elm.id}>\r\n        //         <Link key={elm.id} to={`/questions/with/${elm.topic}`}>{elm.topic}</Link>\r\n        //     </li>)\r\n        // });\r\n        return (\r\n            this.state.currentQuestion ? <div>\r\n                    <h3>{this.state.currentQuestion.title}</h3>\r\n                    <p>{this.state.currentQuestion.description}</p>\r\n                    <ul>\r\n                        {this.state.currentQuestion.answers.length <= 0\r\n                            ? \"NO Answers yet\"\r\n                            : this.state.currentQuestion.answers.map(dat => (\r\n                                <li style={{ padding: \"10px\" }} key={this.state.currentQuestion.message}>\r\n                                    <span style={{ color: \"gray\" }}> </span> {dat.text} <br />\r\n                                    {/*<span style={{ color: \"gray\" }}> description: </span> {dat.description} <br />*/}\r\n                                    {dat.message}\r\n                                    <button onClick={() => this.props.state.updateRating(this.state.answers.rating)}>\r\n                                        Increase rating\r\n                                    </button>\r\n                                </li>\r\n                            ))}\r\n                    </ul>\r\n                <AddAnswer\r\n                    postAnswersToDB={this.props.postAnswersToDB} rating={this.props.rating} originalQuestionID={this.props.questionsID}\r\n                />\r\n                        </div>\r\n                    : null\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;"]},"metadata":{},"sourceType":"module"}