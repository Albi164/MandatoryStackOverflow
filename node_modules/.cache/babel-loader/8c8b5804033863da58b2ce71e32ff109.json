{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport './index.css';\nimport Question from \"./Question\";\nimport QuestionList from \"./QuestionList\";\nimport NotFound from \"./NotFound\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.putDataToDB = function (title, description) {\n      var currentIds = _this.state.questions.map(function (questions) {\n        return questions.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:5000/api/questions\", {\n        id: idToBeAdded,\n        title: title,\n        description: description\n      });\n    };\n\n    _this.state = {\n      questions: [] // this.handleChange = this.handleChange.bind(this);\n\n    };\n    _this.API_URL = window.location.href;\n    return _this;\n  } // handleChange() {\n  //     console.log(\"test\");\n  // }\n\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, json;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://localhost:8080/questions2\");\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                json = _context.sent;\n                this.setState({\n                  questions: json\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"filterByTopic\",\n    value: function filterByTopic(topic) {\n      return this.state.questions.filter(function (elm) {\n        return elm.topic.includes(topic);\n      });\n    }\n  }, {\n    key: \"getQuestionFromId\",\n    value: function () {\n      var _getQuestionFromId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        var response, json;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(\"http://localhost:8080/questions2\");\n\n              case 2:\n                response = _context2.sent;\n                _context2.next = 5;\n                return response.json();\n\n              case 5:\n                json = _context2.sent;\n                this.setState({\n                  questions: json\n                });\n                return _context2.abrupt(\"return\", this.state.questions.find(function (elm) {\n                  return Number(elm.id) === Number(id);\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getQuestionFromId(_x) {\n        return _getQuestionFromId.apply(this, arguments);\n      }\n\n      return getQuestionFromId;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var questions = this.state.questions;\n      console.log(this.state.questions);\n      return React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"StackOverflow\"), React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: '/',\n        render: function render(props) {\n          return React.createElement(QuestionList, Object.assign({}, props, {\n            questions: questions,\n            header: 'Questions Asked',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: '/question/:id',\n        render: function render(props) {\n          return React.createElement(Question, Object.assign({}, props, {\n            questionsID: props.match.params.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: '/questions/with/:topic',\n        render: function render(props) {\n          return React.createElement(QuestionList, Object.assign({}, props, {\n            questions: _this2.filterByTopic(props.match.params.topic),\n            header: \"Questions that consist \".concat(props.match.params.topic),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(Route, {\n        component: NotFound,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\mrazo\\OneDrive\\Plocha\\School\\Frameworks\\MandatoryTest\\src\\App.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","Switch","Question","QuestionList","NotFound","App","props","putDataToDB","title","description","currentIds","state","questions","map","id","idToBeAdded","includes","axios","post","API_URL","window","location","href","fetch","response","json","setState","topic","filter","elm","find","Number","console","log","match","params","filterByTopic"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {  BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport './index.css';\r\nimport Question from \"./Question\";\r\nimport QuestionList from \"./QuestionList\";\r\nimport NotFound from \"./NotFound\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { questions: [] }\r\n        // this.handleChange = this.handleChange.bind(this);\r\n        this.API_URL = window.location.href;\r\n    }\r\n    // handleChange() {\r\n    //     console.log(\"test\");\r\n    // }\r\n    async componentWillMount() {\r\n        //await data.\r\n        const response = await fetch(\r\n            `http://localhost:8080/questions2`\r\n        );\r\n\r\n        //assign to const json and set state when we receive data\r\n        const json = await response.json();\r\n        this.setState({ questions: json });\r\n    }\r\n\r\n    putDataToDB = (title,description) => {\r\n        let currentIds = this.state.questions.map(questions => questions.id);\r\n        let idToBeAdded = 0;\r\n        while (currentIds.includes(idToBeAdded)) {\r\n            ++idToBeAdded;\r\n        }\r\n\r\n        axios.post(\"http://localhost:5000/api/questions\", {\r\n            id: idToBeAdded,\r\n            title: title,\r\n            description: description\r\n        });\r\n    };\r\n    filterByTopic(topic) {\r\n        return this.state.questions.filter((elm) => elm.topic.includes(topic))\r\n    }\r\n   \r\n    async getQuestionFromId(id) {\r\n               //await data.\r\n               const response = await fetch(\r\n                `http://localhost:8080/questions2`\r\n            );\r\n    \r\n            //assign to const json and set state when we receive data\r\n            const json = await response.json();\r\n            this.setState({ questions: json });\r\n            return this.state.questions.find((elm) => Number(elm.id) === Number(id));\r\n    }\r\n    render() {\r\n        var questions = this.state.questions;\r\n        console.log(this.state.questions);\r\n        return (\r\n            <Router>\r\n                <div className=\"container\">\r\n                    <h1>StackOverflow</h1>\r\n                    <Switch>\r\n                    <Route exact path={'/'}\r\n                            render={(props) =>\r\n                                <QuestionList {...props}\r\n                                    questions={questions}\r\n                                    header={'Questions Asked'} />\r\n\r\n\r\n\r\n                            }\r\n                        />\r\n\r\n                        <Route exact path={'/question/:id'}\r\n                            render={(props) => <Question {...props}\r\n                                questionsID={props.match.params.id} />}\r\n                        />\r\n\r\n                        <Route exact path={'/questions/with/:topic'}\r\n                            render={(props) =>\r\n                                <QuestionList {...props}\r\n                                    questions={this.filterByTopic(props.match.params.topic)}\r\n                                    header={`Questions that consist ${props.match.params.topic}`} />}\r\n                        />\r\n\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}