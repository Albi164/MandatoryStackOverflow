{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\mrazo\\\\OneDrive\\\\Plocha\\\\School\\\\Frameworks\\\\MandatoryTest\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport Switch from \"react-switch\";\nimport './index.css';\nimport Question from \"./Question\";\nimport QuestionList from \"./QuestionList\";\nimport AddQuestion from \"./AddQuestion\";\nimport NotFound from \"./NotFound\";\nimport axios from 'axios';\n\nfunction axiosTest() {\n  return axios.get('http://localhost:8080/questions2').then(function (response) {\n    // returning the data here allows the caller to get it through another .then(...)\n    return response.data;\n  });\n}\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: JSON.parse(localStorage.getItem('data')),\n      title: null,\n      description: null,\n      answers: null\n    };\n\n    _this.getDataFromDb = function () {\n      fetch(\"http://localhost:5000/api/questions\").then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this.setState({\n          data: res.data\n        });\n      });\n\n      _this.storage();\n    };\n\n    _this.putDataToDB = function (title, description) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:5000/api/questions\", {\n        id: idToBeAdded,\n        title: title,\n        description: description\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 1000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    } // never let a process live forever\n    // always kill a process everytime we are done using it\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    }\n  }, {\n    key: \"storage\",\n    value: function storage() {\n      var data = this.state.data;\n      localStorage.setItem(\"data\", JSON.stringify(data));\n    }\n  }, {\n    key: \"getDataFromDbWithId\",\n    value: function getDataFromDbWithId(id) {\n      console.log(this.state.data);\n      console.log(id);\n      return this.state.data.find(function (dat) {\n        return dat._id === id;\n      });\n    }\n  }, {\n    key: \"render\",\n    // our delete method that uses our backend api\n    // to remove existing database information\n    // deleteFromDB = idTodelete => {\n    //     let objIdToDelete = null;\n    //     this.state.data.forEach(dat => {\n    //         if (dat.id == idTodelete) {\n    //             objIdToDelete = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.delete(\"http://localhost:3001/api/deleteData\", {\n    //         data: {\n    //             id: objIdToDelete\n    //         }\n    //     });\n    // };\n    // our update method that uses our backend api\n    // to overwrite existing data base information\n    // updateDB = (idToUpdate, updateToApply) => {\n    //     let objIdToUpdate = null;\n    //     this.state.data.forEach(dat => {\n    //         if (dat.id == idToUpdate) {\n    //             objIdToUpdate = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.post(\"http://localhost:3001/api/updateData\", {\n    //         id: objIdToUpdate,\n    //         update: { message: updateToApply }\n    //     });\n    // };\n    // here is our UI\n    // it is easy to understand their functions when you\n    // see them render into our screen\n    value: function render() {\n      var _this2 = this;\n\n      return (// testing prs\n        React.createElement(BrowserRouter, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(Route, {\n          exact: true,\n          path: '/questions',\n          render: function render(props) {\n            return React.createElement(Question, Object.assign({}, props, {\n              data: _this2.state,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 129\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }), React.createElement(Route, {\n          exact: true,\n          path: '/questions/:id',\n          render: function render(props) {\n            return React.createElement(IndividualQuestion, Object.assign({}, props, {\n              question: _this2.getDataFromDbWithId(props.match.params.id),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 134\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        })))\n      );\n    } // {/*    <input*/}\n    // {/*        type=\"text\"*/}\n    // {/*        style={{ width: \"200px\" }}*/}\n    // {/*        onChange={e => this.setState({ idToDelete: e.target.value })}*/}\n    // {/*        placeholder=\"put id of item to delete here\"*/}\n    // {/*    />*/}\n    // {/*    <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>*/}\n    // {/*        DELETE*/}\n    // {/*    </button>*/}\n    // {/*</div>*/}\n    // {/*<div style={{ padding: \"10px\" }}>*/}\n    // {/*    <input*/}\n    // {/*        type=\"text\"*/}\n    // {/*        style={{ width: \"200px\" }}*/}\n    // {/*        onChange={e => this.setState({ idToUpdate: e.target.value })}*/}\n    // {/*        placeholder=\"id of item to update here\"*/}\n    // {/*    />*/}\n    // {/*    <input*/}\n    // {/*        type=\"text\"*/}\n    // {/*        style={{ width: \"200px\" }}*/}\n    // {/*        onChange={e => this.setState({ updateToApply: e.target.value })}*/}\n    // {/*        placeholder=\"put new value of the item here\"*/}\n    // {/*    />*/}\n    // {/*    <button*/}\n    // {/*        onClick={() =>*/}\n    // {/*            this.updateDB(this.state.idToUpdate, this.state.updateToApply)*/}\n    // {/*        }*/}\n    // {/*    >*/}\n    // {/*        UPDATE*/}\n    // {/*    </button>*/}\n    // {/*</div>*/}\n    // constructor(props) {\n    //     super(props);\n    //     this.gotData = false;\n    //     this.state = { checked: false, questions: this.getData()}\n    //     this.handleChange = this.handleChange.bind(this);\n    //     this.API_URL=window.location.href;\n    // }\n    // handleChange() {\n    //     console.log(\"test\");\n    // }\n    // componentDidMount() {\n    //     axiosTest().then(data => {\n    //         this.setState({\n    //             questions: data\n    //         });\n    //         this.gotData = true;\n    //     });\n    // }\n    // componentWillMount() {\n    //     axiosTest().then(data => {\n    //         this.setState({\n    //             questions: data\n    //         });\n    //         this.gotData = true;\n    //     });\n    // }\n    //     getData(){\n    //     console.log(this);\n    //     // fetch(`http://localhost:8080/questions2`)\n    //     //     .then(response =>{\n    //     //         console.log(response);\n    //     //\n    //     //     })\n    //     //     .then(json =>{\n    //     //         this.setState({questions: json});\n    //     //     });\n    //         axiosTest().then(data => {\n    //             this.setState({\n    //                 questions: data\n    //             });\n    //             this.gotData = true;\n    //         });\n    // }\n    //\n    //\n    //\n    // addQuestion(text) {\n    //     let newQuestion = {\n    //         id: Math.floor(Math.random() * Math.floor(1000000)),\n    //         task: text,\n    //         done: false\n    //     };\n    //     this.setState({\n    //         questions: [...this.state.questions, newQuestion]\n    //     });\n    // }\n    // getQuestionFromId(id) {\n    //     return this.state.questions.find((elm) => elm.id === Number(id));\n    // }\n    //\n    // filterByTopic(topic) {\n    //     return this.state.questions.filter((elm) => elm.topic.includes(topic))\n    // }\n    //\n    // render() {\n    //     var questions = this.state.questions;\n    //     return (\n    //         <Router>\n    //             <div className=\"container\">\n    //                 <h1>StackOverflow</h1>\n    //\n    //                 <Switch >\n    //                     <Route exact path={'/'}\n    //                            render={(props) =>\n    //                                <QuestionList\n    //                                              {...props}\n    //                                              header={'Questions Asked'}/>\n    //                            }\n    //                     />\n    //\n    //\n    //\n    //                     <Route component={NotFound} />\n    //                 </Switch>\n    //\n    //             </div>\n    //         </Router>\n    //     );\n    // }\n\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\mrazo\\OneDrive\\Plocha\\School\\Frameworks\\MandatoryTest\\src\\App.js"],"names":["React","Component","Route","Link","BrowserRouter","Router","Switch","Question","QuestionList","AddQuestion","NotFound","axios","axiosTest","get","then","response","data","App","state","JSON","parse","localStorage","getItem","title","description","answers","getDataFromDb","fetch","json","res","setState","storage","putDataToDB","currentIds","map","id","idToBeAdded","includes","post","intervalIsSet","interval","setInterval","clearInterval","setItem","stringify","console","log","find","dat","_id","props","getDataFromDbWithId","match","params"],"mappings":"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BAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAE,YAAnB;AACO,UAAA,MAAM,EAAE,gBAACe,KAAD;AAAA,mBACJ,oBAAC,QAAD,oBAAcA,KAAd;AACU,cAAA,IAAI,EAAE,MAAI,CAAChC,KADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADI;AAAA,WADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAOI,oBAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAE,gBAAnB;AACO,UAAA,MAAM,EAAE,gBAACgC,KAAD;AAAA,mBAAW,oBAAC,kBAAD,oBAAwBA,KAAxB;AACoB,cAAA,QAAQ,EAAE,MAAI,CAACC,mBAAL,CAAyBD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBlB,EAA5C,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAX;AAAA,WADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPJ,CADJ;AAFJ;AAgBH,K,CAIG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;EArPclC,S;;AAwPlB,eAAegB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport Switch from \"react-switch\";\nimport './index.css';\nimport Question from \"./Question\";\nimport QuestionList from \"./QuestionList\";\nimport AddQuestion from \"./AddQuestion\";\nimport NotFound from \"./NotFound\";\nimport axios from 'axios';\nfunction axiosTest() {\n    return axios.get('http://localhost:8080/questions2').then(response => {\n        // returning the data here allows the caller to get it through another .then(...)\n        return response.data\n    })\n}\n\nclass App extends Component {\n    state = {\n        data: JSON.parse(localStorage.getItem('data')),\n        title: null,\n        description: null,\n        answers: null,\n    };\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    storage(){\n        let data = this.state.data;\n        localStorage.setItem(\"data\", JSON.stringify(data))\n    };\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    getDataFromDb = () => {\n        fetch(\"http://localhost:5000/api/questions\")\n            .then(data => data.json())\n            .then(res => this.setState({ data: res.data }));\n        this.storage()\n    };\n\n    getDataFromDbWithId (id) {\n        console.log(this.state.data) ;\n        console.log(id);\n        return this.state.data.find((dat =>dat._id === id))\n    };\n\n    // our put method that uses our backend api\n    // to create new query into our data base\n    putDataToDB = (title,description) => {\n        let currentIds = this.state.data.map(data => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post(\"http://localhost:5000/api/questions\", {\n            id: idToBeAdded,\n            title: title,\n            description: description\n        });\n    };\n    // our delete method that uses our backend api\n    // to remove existing database information\n    // deleteFromDB = idTodelete => {\n    //     let objIdToDelete = null;\n    //     this.state.data.forEach(dat => {\n    //         if (dat.id == idTodelete) {\n    //             objIdToDelete = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.delete(\"http://localhost:3001/api/deleteData\", {\n    //         data: {\n    //             id: objIdToDelete\n    //         }\n    //     });\n    // };\n\n\n    // our update method that uses our backend api\n    // to overwrite existing data base information\n    // updateDB = (idToUpdate, updateToApply) => {\n    //     let objIdToUpdate = null;\n    //     this.state.data.forEach(dat => {\n    //         if (dat.id == idToUpdate) {\n    //             objIdToUpdate = dat._id;\n    //         }\n    //     });\n    //\n    //     axios.post(\"http://localhost:3001/api/updateData\", {\n    //         id: objIdToUpdate,\n    //         update: { message: updateToApply }\n    //     });\n    // };\n\n\n    // here is our UI\n    // it is easy to understand their functions when you\n    // see them render into our screen\n    render() {\n        return (\n            // testing prs\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path={'/questions'}\n                           render={(props) =>\n                               <Question {...props}\n                                         data={this.state}/>\n                           }\n                    />\n                    <Route exact path={'/questions/:id'}\n                           render={(props) => <IndividualQuestion {...props}\n                                                                  question={this.getDataFromDbWithId(props.match.params.id)}/>}\n                    />\n                </Switch>\n            </BrowserRouter>);\n    }\n\n\n\n        // {/*    <input*/}\n        // {/*        type=\"text\"*/}\n        // {/*        style={{ width: \"200px\" }}*/}\n        // {/*        onChange={e => this.setState({ idToDelete: e.target.value })}*/}\n        // {/*        placeholder=\"put id of item to delete here\"*/}\n        // {/*    />*/}\n        // {/*    <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>*/}\n        // {/*        DELETE*/}\n        // {/*    </button>*/}\n        // {/*</div>*/}\n        // {/*<div style={{ padding: \"10px\" }}>*/}\n        // {/*    <input*/}\n        // {/*        type=\"text\"*/}\n        // {/*        style={{ width: \"200px\" }}*/}\n        // {/*        onChange={e => this.setState({ idToUpdate: e.target.value })}*/}\n        // {/*        placeholder=\"id of item to update here\"*/}\n        // {/*    />*/}\n        // {/*    <input*/}\n        // {/*        type=\"text\"*/}\n        // {/*        style={{ width: \"200px\" }}*/}\n        // {/*        onChange={e => this.setState({ updateToApply: e.target.value })}*/}\n        // {/*        placeholder=\"put new value of the item here\"*/}\n        // {/*    />*/}\n        // {/*    <button*/}\n        // {/*        onClick={() =>*/}\n        // {/*            this.updateDB(this.state.idToUpdate, this.state.updateToApply)*/}\n        // {/*        }*/}\n        // {/*    >*/}\n        // {/*        UPDATE*/}\n        // {/*    </button>*/}\n        // {/*</div>*/}\n    // constructor(props) {\n    //     super(props);\n    //     this.gotData = false;\n    //     this.state = { checked: false, questions: this.getData()}\n    //     this.handleChange = this.handleChange.bind(this);\n    //     this.API_URL=window.location.href;\n    // }\n    // handleChange() {\n    //     console.log(\"test\");\n    // }\n    // componentDidMount() {\n    //     axiosTest().then(data => {\n    //         this.setState({\n    //             questions: data\n    //         });\n    //         this.gotData = true;\n    //     });\n    // }\n    // componentWillMount() {\n    //     axiosTest().then(data => {\n    //         this.setState({\n    //             questions: data\n    //         });\n    //         this.gotData = true;\n    //     });\n    // }\n    //     getData(){\n    //     console.log(this);\n    //     // fetch(`http://localhost:8080/questions2`)\n    //     //     .then(response =>{\n    //     //         console.log(response);\n    //     //\n    //     //     })\n    //     //     .then(json =>{\n    //     //         this.setState({questions: json});\n    //     //     });\n    //         axiosTest().then(data => {\n    //             this.setState({\n    //                 questions: data\n    //             });\n    //             this.gotData = true;\n    //         });\n    // }\n    //\n    //\n    //\n    // addQuestion(text) {\n    //     let newQuestion = {\n    //         id: Math.floor(Math.random() * Math.floor(1000000)),\n    //         task: text,\n    //         done: false\n    //     };\n    //     this.setState({\n    //         questions: [...this.state.questions, newQuestion]\n    //     });\n    // }\n    // getQuestionFromId(id) {\n    //     return this.state.questions.find((elm) => elm.id === Number(id));\n    // }\n    //\n    // filterByTopic(topic) {\n    //     return this.state.questions.filter((elm) => elm.topic.includes(topic))\n    // }\n    //\n    // render() {\n    //     var questions = this.state.questions;\n    //     return (\n    //         <Router>\n    //             <div className=\"container\">\n    //                 <h1>StackOverflow</h1>\n    //\n    //                 <Switch >\n    //                     <Route exact path={'/'}\n    //                            render={(props) =>\n    //                                <QuestionList\n    //                                              {...props}\n    //                                              header={'Questions Asked'}/>\n    //                            }\n    //                     />\n    //\n    //\n    //\n    //                     <Route component={NotFound} />\n    //                 </Switch>\n    //\n    //             </div>\n    //         </Router>\n    //     );\n    // }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}